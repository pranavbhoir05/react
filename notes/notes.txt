
vid no 5 virtual Dom , fiber and reconciliation

1 . undersatanding createroot , behind the scene

*why does createroot creates its dom ? 
ans : React creates a virtual DOM, compares it with the real DOM, and updates only the changed parts. Without this, the browser re-renders larger sections, which is less efficient. In advanced use, React allows tracing values in a tree-like structure, updating only the changed part.

###########################################################################################

react fiber :
                React Fiber is the new reconciliation engine introduced in React 16 to improve rendering performance and responsiveness. It breaks rendering into small units of work that can be managed more efficiently.

(optional) : React Fiber is an algorithm — specifically, a new reconciliation algorithm for React. It defines how React updates and re-renders components by breaking work into units (fibers), prioritizing tasks, and supporting features like pause, abort, and reuse. It’s not just a library or feature, but the underlying algorithm that powers React’s rendering.

Key points for interview:

* **Incremental Rendering:** Updates are split into chunks instead of blocking the main thread.
* **Prioritization:** Urgent tasks like animations or user input are handled first.
* **Pause:** Rendering can be paused to let the browser handle critical work and then resumed.
* **Abort:** Ongoing rendering can be canceled if a higher-priority update arrives.
* **Reuse:** Already completed work can be reused to avoid redundant processing.
* **Better Error Handling:** Built-in support for error boundaries.
* **Foundation for Concurrency:** Enables features like Concurrent Mode and Suspense.

#####################################################################################

Reconciliation:
                Reconciliation is React’s process of comparing the new virtual DOM with the previous one and updating only the changed parts in the real DOM.

####################################################################################################

**React Fiber Notes – Interview Perspective:**

**1. Purpose of Fiber:**

* Enables React to use **scheduling** for better performance.
* Allows:

  * Pause work** and resume later
  * Assign priorities** to different updates
  * Reuse** previously completed work
  * Abort** unnecessary work

**2. What is a Fiber:**

* A fiber is the **unit of work** in React’s rendering process.
* It is a lower-level abstraction than what developers usually see.
* Breaking work into fibers lets React manage updates efficiently, prioritize tasks, and improve UI responsiveness.

**3. Key Scheduling Concepts:**

* Not all UI updates need immediate execution.
* Different updates have different priorities (animations high, data updates lower).
* **Push-based:** programmer schedules work.
* **Pull-based:** framework schedules intelligently.
* Original React: re-renders entire subtrees immediately.
* Fiber: overhauls reconciliation to leverage scheduling and incremental rendering.

#########################################################

for more info visit : https://github.com/acdlite/react-fiber-architecture

****************************************************************************************__________________________________________
vid no 6  : Tailwind and Props in reactjs


tailwind dont directly work to access tailwind we need add tailwind dependencis
go to tailwind side for configuration in vite
follow steps of site
1. npm install -D tailwindcss@3 postcss autoprefixer
2. npx tailwindcss init -p

3.    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
paste this in tailwind config

4.  @tailwind base;
    @tailwind components;
    @tailwind utilities;
paste this in top corner in index.css

5. npm run dev

also install Tailwind CSS IntelliSense
also react snippits

#############################################################################

props: propd makes component reuseable
     
Definition: Props are read-only inputs that a parent component passes to a child component to configure or control its behavior.
Purpose: They allow component reusability and dynamic rendering by providing external data to child components.

Key Characteristics:

1. Immutable inside the child component.
2. Enable unidirectional data flow (parent → child).
3. Different from state, which is internal and mutable.

_________________________________________________________

function Child({ name }) {
  return <p>Hello {name}</p>;
}

function Parent() {
  return <Child name="Pranav" />;
}


Here, name is a prop passed from Parent to Child.

################################################################

we'll craete new compoent which will return card
create folder name componets created file Card.jsx , and use shorcut rfce for function
add img code ion that function , now import card in app.jsx,
you can also repeat the same card , but both cards contain same name 
what if i want value from array or database , just like flipkard,ecommers web, even if we apply lopp, but every card contain diffrent information
and all the things can be done by using props

 after importing card <card /> we need to pass value in it as if want to change in multiple cards
 * you always need to declear variable to pass values in array or in object {} format, you just cant directly pass value in <card />
 *in card function you need to destuctre {username} instead of writing props.username and all
 *while adding button, mentioning click me in <card/< isnt enough, you also need to declear in e.g : function ({btn text})
 *even if click me or visit me values dont exist , that time another value can be fill if u mention in function 

 in this video i learn :  tailwind and its components,card
                          create our own components and passing any value in componets and also hangling
                          props basis, its extraction and also default values

********************************************************************************************************************

video no 9 : Building a react project | bgChanger

in this project we'll use vite to implement our project , also add tailwind if you want (https://v3.tailwindcss.com/docs/guides/vite)